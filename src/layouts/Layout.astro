---
declare global {
  interface Document {
    createDocumentTransition: any
  }
  interface CSSStyleDeclaration {
    pageTransitionTag: any
  }
}

export interface Props {
  title: string
}

const { title } = Astro.props
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
  </head>
  <body class="bg-black text-white">
    <div>
      <header class="p-4">
        <h1
          class="font-extrabold text-transparent text-center text-2xl md:text-5xl bg-clip-text bg-gradient-to-r from-purple-400 to-pink-600"
        >
          <a href="/">Shared Element Transition</a>
        </h1>
      </header>
      <main id="content">
        <slot />
      </main>
      <footer class="p-4 text-center text-gray-500 text-sm">
        &copy; {new Date().getFullYear()}
        <a href="https://twitter.com/yosket87" target="_blank" class="underline"
          >@yosket87</a
        >
      </footer>
    </div>

    <script>
      async function getHTMLFragment(pathname: string) {
        const response = await fetch(pathname)
        return await response.text()
      }

      function updateTheDOMSomehow(html: string) {
        document.getElementById('content')!.innerHTML = html
      }

      function getNavigationType(fromPath: string, toPath: string) {
        if (fromPath === '/' && toPath.startsWith('/posts')) {
          return 'home-to-post'
        }

        if (fromPath.startsWith('/posts') && toPath === '/') {
          return 'post-to-home'
        }

        return 'other'
      }

      window.navigation.addEventListener('navigate', (navigateEvent) => {
        const toUrl = new URL(navigateEvent.destination.url)
        const toPath = toUrl.pathname
        const fromPath = location.pathname
        const navigationType = getNavigationType(fromPath, toPath)

        if (navigationType === 'home-to-post') {
          const handler = async () => {
            const html = await getHTMLFragment(`/fragments${toUrl.pathname}`)

            // If the browser doesn't support this API, update the DOM as usual
            if (!document.createDocumentTransition) {
              updateTheDOMSomehow(html)
              return
            }

            const thumbnail = document.getElementById(
              `thumbnail-${toUrl.pathname.replace('/posts/', '')}`
            )
            if (thumbnail) {
              thumbnail.style.pageTransitionTag = 'full-img'
            }

            // Otherwise, update the DOM within a transition
            const transition = document.createDocumentTransition()
            transition.start(() => {
              if (thumbnail) {
                thumbnail.style.pageTransitionTag = ''
              }

              updateTheDOMSomehow(html)
            })
          }
          ;(navigateEvent as any).transitionWhile(handler())
        } else if (navigationType === 'post-to-home') {
          const handler = async () => {
            const html = await getHTMLFragment('/fragments/posts')

            // If the browser doesn't support this API, update the DOM as usual
            if (!document.createDocumentTransition) {
              updateTheDOMSomehow(html)
              return
            }

            // Otherwise, update the DOM within a transition
            const transition = document.createDocumentTransition()
            let thumbnail: HTMLElement | null = null

            transition
              .start(() => {
                updateTheDOMSomehow(html)

                thumbnail = document.getElementById(
                  `thumbnail-${fromPath.replace('/posts/', '')}`
                )
                if (thumbnail) {
                  ;(thumbnail as any).scrollIntoViewIfNeeded()
                  thumbnail.style.pageTransitionTag = 'full-img'
                }
              })
              .then(() => {
                if (thumbnail) {
                  thumbnail.style.pageTransitionTag = ''
                }
              })
          }
          ;(navigateEvent as any).transitionWhile(handler())
        }
      })
    </script>

    <style is:global>
      @keyframes fade-in {
        from {
          opacity: 0;
        }
      }

      @keyframes fade-out {
        to {
          opacity: 0;
        }
      }

      @keyframes slide-from-right {
        from {
          transform: translateX(30px);
        }
      }

      @keyframes slide-to-left {
        to {
          transform: translateX(-30px);
        }
      }

      ::page-transition-outgoing-image(root) {
        animation: 90ms cubic-bezier(0.4, 0, 1, 1) both fade-out;
      }

      ::page-transition-incoming-image(root) {
        animation: 210ms cubic-bezier(0, 0, 0.2, 1) 300ms both fade-in;
      }

      header {
        page-transition-tag: header;
        contain: paint;
      }

      .thumbnail {
        contain: paint;
      }

      .full-img {
        page-transition-tag: full-img;
        contain: paint;
      }

      ::page-transition-outgoing-image(full-img),
      ::page-transition-incoming-image(full-img) {
        animation: none;
        mix-blend-mode: normal;
      }

      ::page-transition-image-wrapper(full-img) {
        isolation: none;
      }
    </style>
  </body>
</html>
